
use std::collections::LinkedList;

use crate::option::TelnetOption;
use crate::negotiation::NegotiationAction;

///
/// Events generated by `Telnet`.
///
#[derive(Debug)]
pub enum TelnetEvent {
    /// Data received (excluding telnet commands)
    Data(Box<[u8]>),
    /// An unrecognized telnet command received
    UnknownIAC(u8),
    /// A telnet negotiation received
    Negotiation(NegotiationAction, TelnetOption),
    /// A telnet subnegotiation data received
    Subnegotiation(TelnetOption, Box<[u8]>),
    /// Read time out
    TimedOut,
    /// No data to read
    NoData,
    /// Error encountered during processing read buffer
    Error(String)
}

pub struct TelnetEventQueue {
    queue: LinkedList<TelnetEvent>
}

impl TelnetEventQueue {
    pub fn new() -> TelnetEventQueue {
        TelnetEventQueue {
            queue: LinkedList::new()
        }
    }

    pub fn push_event(&mut self, event: TelnetEvent) {
        self.queue.push_back(event);
    }

    pub fn take_event(&mut self) -> Option<TelnetEvent> {
        self.queue.pop_front()
    }

    pub fn is_empty(&self) -> bool {
        self.queue.is_empty()
    }
}
